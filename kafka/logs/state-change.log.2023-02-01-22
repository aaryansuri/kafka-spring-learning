[2023-01-31 19:35:16,905] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2023-01-31 19:35:36,331] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2023-01-31 19:36:06,189] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2023-01-31 19:39:36,014] INFO [Controller id=0 epoch=2] Changed partition test-topic-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:39:36,015] INFO [Controller id=0 epoch=2] Changed partition test-topic-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:39:36,015] INFO [Controller id=0 epoch=2] Changed partition test-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:39:36,015] INFO [Controller id=0 epoch=2] Changed partition test-topic-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:39:36,016] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2023-01-31 19:39:36,027] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2023-01-31 19:39:36,085] INFO [Controller id=0 epoch=2] Changed partition test-topic-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:39:36,086] INFO [Controller id=0 epoch=2] Changed partition test-topic-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:39:36,086] INFO [Controller id=0 epoch=2] Changed partition test-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:39:36,086] INFO [Controller id=0 epoch=2] Changed partition test-topic-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:39:36,090] INFO [Controller id=0 epoch=2] Sending LeaderAndIsr request to broker 0 with 4 become-leader and 0 become-follower partitions (state.change.logger)
[2023-01-31 19:39:36,095] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set(0) for 4 partitions (state.change.logger)
[2023-01-31 19:39:36,100] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2023-01-31 19:39:36,108] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 4 partitions (state.change.logger)
[2023-01-31 19:39:36,171] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 2 as part of the become-leader transition for 4 partitions (state.change.logger)
[2023-01-31 19:39:36,366] INFO [Broker id=0] Leader test-topic-2 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:39:36,470] INFO [Broker id=0] Leader test-topic-3 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:39:36,503] INFO [Broker id=0] Leader test-topic-0 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:39:36,534] INFO [Broker id=0] Leader test-topic-1 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:39:36,565] INFO [Broker id=0] Finished LeaderAndIsr request in 460ms correlationId 1 from controller 0 for 4 partitions (state.change.logger)
[2023-01-31 19:39:36,593] INFO [Broker id=0] Add 4 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 2 with correlation id 2 (state.change.logger)
[2023-01-31 19:42:54,309] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,309] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,310] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,310] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,310] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,310] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,311] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,311] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,311] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,311] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,311] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,311] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,312] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,312] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,312] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,312] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,312] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,313] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,313] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,313] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,313] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,313] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,313] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,314] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,314] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,314] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,314] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,314] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,315] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,315] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,315] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,315] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,315] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,316] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,316] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,316] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,316] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,316] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,316] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,317] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,317] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,317] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,317] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,317] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,318] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,319] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,319] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,319] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,320] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,320] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2023-01-31 19:42:54,320] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2023-01-31 19:42:54,336] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2023-01-31 19:42:54,592] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,592] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,592] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,592] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,592] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,593] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,593] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,593] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,593] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,593] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,593] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,593] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,594] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,594] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,594] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,594] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,594] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,594] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,594] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,594] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,595] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,595] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,595] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,595] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,595] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,596] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,596] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,596] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,596] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,596] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,596] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,596] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,596] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,597] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,597] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,597] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,597] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,597] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,597] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,597] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,597] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,598] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,598] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,598] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,598] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,598] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,598] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,598] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,598] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,599] INFO [Controller id=0 epoch=2] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, partitionEpoch=0) (state.change.logger)
[2023-01-31 19:42:54,600] INFO [Controller id=0 epoch=2] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2023-01-31 19:42:54,601] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2023-01-31 19:42:54,611] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2023-01-31 19:42:54,614] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2023-01-31 19:42:54,792] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 0 epoch 2 as part of the become-leader transition for 50 partitions (state.change.logger)
[2023-01-31 19:42:54,842] INFO [Broker id=0] Leader __consumer_offsets-0 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:54,877] INFO [Broker id=0] Leader __consumer_offsets-29 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:54,913] INFO [Broker id=0] Leader __consumer_offsets-48 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:54,949] INFO [Broker id=0] Leader __consumer_offsets-10 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:54,988] INFO [Broker id=0] Leader __consumer_offsets-45 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,026] INFO [Broker id=0] Leader __consumer_offsets-26 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,060] INFO [Broker id=0] Leader __consumer_offsets-7 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,096] INFO [Broker id=0] Leader __consumer_offsets-42 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,133] INFO [Broker id=0] Leader __consumer_offsets-4 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,168] INFO [Broker id=0] Leader __consumer_offsets-23 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,204] INFO [Broker id=0] Leader __consumer_offsets-1 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,243] INFO [Broker id=0] Leader __consumer_offsets-20 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,278] INFO [Broker id=0] Leader __consumer_offsets-39 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,312] INFO [Broker id=0] Leader __consumer_offsets-17 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,350] INFO [Broker id=0] Leader __consumer_offsets-36 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,388] INFO [Broker id=0] Leader __consumer_offsets-14 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,415] INFO [Broker id=0] Leader __consumer_offsets-33 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,447] INFO [Broker id=0] Leader __consumer_offsets-49 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,475] INFO [Broker id=0] Leader __consumer_offsets-11 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,503] INFO [Broker id=0] Leader __consumer_offsets-30 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,530] INFO [Broker id=0] Leader __consumer_offsets-46 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,559] INFO [Broker id=0] Leader __consumer_offsets-27 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,588] INFO [Broker id=0] Leader __consumer_offsets-8 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,621] INFO [Broker id=0] Leader __consumer_offsets-24 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,649] INFO [Broker id=0] Leader __consumer_offsets-43 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,677] INFO [Broker id=0] Leader __consumer_offsets-5 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,704] INFO [Broker id=0] Leader __consumer_offsets-21 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,729] INFO [Broker id=0] Leader __consumer_offsets-40 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,760] INFO [Broker id=0] Leader __consumer_offsets-2 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:42:55,983] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-0 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:55,990] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-29 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:55,992] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-48 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:55,993] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-10 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:55,995] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-45 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:55,996] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-26 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:55,997] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-7 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:55,998] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-42 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:55,999] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-4 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,001] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-23 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,002] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-1 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,003] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-20 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,004] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-39 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,005] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-17 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,006] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-36 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,007] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-14 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,008] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-33 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,009] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-49 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,010] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-11 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,011] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-30 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,011] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-46 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,012] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-27 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,013] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-8 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,014] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-24 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,015] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-43 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,015] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-5 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,016] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-21 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,017] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-40 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,017] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-2 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,018] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-37 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,019] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-18 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,019] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-34 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,019] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-15 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,020] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-12 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,020] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-31 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,021] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-9 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,022] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-47 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,022] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-19 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,023] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-28 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,024] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-38 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,024] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-35 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,025] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-6 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,026] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-44 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,026] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-25 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,027] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-16 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,028] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-22 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,029] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-41 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,029] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-32 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,030] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-3 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,030] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 2 for partition __consumer_offsets-13 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:42:56,064] ERROR [Controller id=0] Received error UNKNOWN_SERVER_ERROR in LeaderAndIsr response LeaderAndIsrResponseData(errorCode=-1, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=WX2zNAFfSXyDCUNjGn6kLA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1)])]) from broker 0 (state.change.logger)
[2023-01-31 19:42:56,067] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 2 with correlation id 4 (state.change.logger)
[2023-01-31 19:47:21,845] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2023-01-31 19:55:07,985] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2023-01-31 19:55:08,032] INFO [Controller id=0 epoch=3] Sending LeaderAndIsr request to broker 0 with 54 become-leader and 0 become-follower partitions (state.change.logger)
[2023-01-31 19:55:08,036] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set(0) for 54 partitions (state.change.logger)
[2023-01-31 19:55:08,070] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 54 partitions (state.change.logger)
[2023-01-31 19:55:08,163] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 3 as part of the become-leader transition for 54 partitions (state.change.logger)
[2023-01-31 19:55:08,189] INFO [Broker id=0] Leader __consumer_offsets-0 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,220] INFO [Broker id=0] Leader __consumer_offsets-29 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,226] INFO [Broker id=0] Leader __consumer_offsets-48 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,233] INFO [Broker id=0] Leader test-topic-2 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 1 with partition epoch 0, high watermark 1, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,235] INFO [Broker id=0] Leader __consumer_offsets-10 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,243] INFO [Broker id=0] Leader __consumer_offsets-45 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,250] INFO [Broker id=0] Leader __consumer_offsets-26 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,258] INFO [Broker id=0] Leader __consumer_offsets-7 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,266] INFO [Broker id=0] Leader __consumer_offsets-42 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,273] INFO [Broker id=0] Leader __consumer_offsets-4 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,279] INFO [Broker id=0] Leader __consumer_offsets-23 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,286] INFO [Broker id=0] Leader test-topic-3 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,295] INFO [Broker id=0] Leader __consumer_offsets-1 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,302] INFO [Broker id=0] Leader __consumer_offsets-20 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,312] INFO [Broker id=0] Leader __consumer_offsets-39 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,319] INFO [Broker id=0] Leader __consumer_offsets-17 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,327] INFO [Broker id=0] Leader __consumer_offsets-36 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,334] INFO [Broker id=0] Leader test-topic-0 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 1 with partition epoch 0, high watermark 1, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,337] INFO [Broker id=0] Leader __consumer_offsets-14 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,345] INFO [Broker id=0] Leader __consumer_offsets-33 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,352] INFO [Broker id=0] Leader __consumer_offsets-49 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,359] INFO [Broker id=0] Leader __consumer_offsets-11 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,366] INFO [Broker id=0] Leader __consumer_offsets-30 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,375] INFO [Broker id=0] Leader __consumer_offsets-46 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,384] INFO [Broker id=0] Leader __consumer_offsets-27 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,390] INFO [Broker id=0] Leader __consumer_offsets-8 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,399] INFO [Broker id=0] Leader __consumer_offsets-24 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,407] INFO [Broker id=0] Leader __consumer_offsets-43 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,417] INFO [Broker id=0] Leader __consumer_offsets-5 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,425] INFO [Broker id=0] Leader __consumer_offsets-21 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,434] INFO [Broker id=0] Leader __consumer_offsets-40 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,441] INFO [Broker id=0] Leader __consumer_offsets-2 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,456] INFO [Broker id=0] Leader __consumer_offsets-37 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:55:08,681] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-0 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,682] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-29 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,683] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-48 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,683] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition test-topic-2 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,683] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-10 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,684] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-45 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,684] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-26 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,684] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-7 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,685] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-42 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,685] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-4 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-23 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition test-topic-3 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-1 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-20 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-39 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-17 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-36 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition test-topic-0 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,687] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-14 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,687] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-33 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,687] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-49 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,687] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-11 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,687] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-30 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,688] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-46 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,688] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-27 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,688] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-8 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,688] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-24 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,688] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-43 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,689] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-5 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,689] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-21 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,689] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-40 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,689] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-2 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,689] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-37 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-18 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition test-topic-1 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-34 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-15 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-12 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-31 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-9 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-47 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-19 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-28 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-38 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-35 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-6 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,692] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-44 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,692] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-25 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,692] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-16 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,692] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-22 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,692] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-41 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,693] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-32 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,693] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-3 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,693] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 3 for partition __consumer_offsets-13 (state.change.logger)
java.io.IOException: Map failed
	at sun.nio.ch.FileChannelImpl.map(Unknown Source)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:124)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:474)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:474)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:165)
	at kafka.log.LogLoader.load(LogLoader.scala:277)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1853)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:946)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:910)
	at kafka.cluster.Partition.createLog(Partition.scala:388)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:363)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:370)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:606)
	at kafka.cluster.Partition.makeLeader(Partition.scala:565)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1605)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1603)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:274)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:179)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.OutOfMemoryError: Map failed
	at sun.nio.ch.FileChannelImpl.map0(Native Method)
	... 37 more
[2023-01-31 19:55:08,706] ERROR [Controller id=0] Received error UNKNOWN_SERVER_ERROR in LeaderAndIsr response LeaderAndIsrResponseData(errorCode=-1, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=OANUbA1wTjKPD7l7SpgrSg, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1)]), LeaderAndIsrTopicError(topicId=WX2zNAFfSXyDCUNjGn6kLA, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1)])]) from broker 0 (state.change.logger)
[2023-01-31 19:55:08,712] INFO [Broker id=0] Add 54 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 3 with correlation id 2 (state.change.logger)
[2023-01-31 19:55:25,672] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2023-01-31 19:58:36,410] INFO [Controller id=0 epoch=4] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2023-01-31 19:58:36,564] INFO [Controller id=0 epoch=4] Sending LeaderAndIsr request to broker 0 with 54 become-leader and 0 become-follower partitions (state.change.logger)
[2023-01-31 19:58:36,572] INFO [Controller id=0 epoch=4] Sending UpdateMetadata request to brokers Set(0) for 54 partitions (state.change.logger)
[2023-01-31 19:58:36,618] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 54 partitions (state.change.logger)
[2023-01-31 19:58:36,704] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 4 as part of the become-leader transition for 54 partitions (state.change.logger)
[2023-01-31 19:58:36,725] INFO [Broker id=0] Leader __consumer_offsets-0 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,744] INFO [Broker id=0] Leader __consumer_offsets-29 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,747] INFO [Broker id=0] Leader __consumer_offsets-48 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,751] INFO [Broker id=0] Leader test-topic-2 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 1 with partition epoch 0, high watermark 1, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,751] INFO [Broker id=0] Leader __consumer_offsets-10 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,755] INFO [Broker id=0] Leader __consumer_offsets-45 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,759] INFO [Broker id=0] Leader __consumer_offsets-26 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,762] INFO [Broker id=0] Leader __consumer_offsets-7 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,765] INFO [Broker id=0] Leader __consumer_offsets-42 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,768] INFO [Broker id=0] Leader __consumer_offsets-4 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,772] INFO [Broker id=0] Leader __consumer_offsets-23 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,774] INFO [Broker id=0] Leader test-topic-3 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,777] INFO [Broker id=0] Leader __consumer_offsets-1 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,779] INFO [Broker id=0] Leader __consumer_offsets-20 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,782] INFO [Broker id=0] Leader __consumer_offsets-39 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,786] INFO [Broker id=0] Leader __consumer_offsets-17 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,789] INFO [Broker id=0] Leader __consumer_offsets-36 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,792] INFO [Broker id=0] Leader test-topic-0 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 1 with partition epoch 0, high watermark 1, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,792] INFO [Broker id=0] Leader __consumer_offsets-14 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,795] INFO [Broker id=0] Leader __consumer_offsets-33 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,797] INFO [Broker id=0] Leader __consumer_offsets-49 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,800] INFO [Broker id=0] Leader __consumer_offsets-11 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,804] INFO [Broker id=0] Leader __consumer_offsets-30 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,807] INFO [Broker id=0] Leader __consumer_offsets-46 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,809] INFO [Broker id=0] Leader __consumer_offsets-27 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,812] INFO [Broker id=0] Leader __consumer_offsets-8 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,816] INFO [Broker id=0] Leader __consumer_offsets-24 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,819] INFO [Broker id=0] Leader __consumer_offsets-43 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,823] INFO [Broker id=0] Leader __consumer_offsets-5 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,826] INFO [Broker id=0] Leader __consumer_offsets-21 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,829] INFO [Broker id=0] Leader __consumer_offsets-40 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,834] INFO [Broker id=0] Leader __consumer_offsets-2 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,838] INFO [Broker id=0] Leader __consumer_offsets-37 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,849] INFO [Broker id=0] Leader __consumer_offsets-18 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,858] INFO [Broker id=0] Leader test-topic-1 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,918] INFO [Broker id=0] Leader __consumer_offsets-34 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,946] INFO [Broker id=0] Leader __consumer_offsets-15 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:36,974] INFO [Broker id=0] Leader __consumer_offsets-12 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,004] INFO [Broker id=0] Leader __consumer_offsets-31 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,034] INFO [Broker id=0] Leader __consumer_offsets-9 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,063] INFO [Broker id=0] Leader __consumer_offsets-47 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,099] INFO [Broker id=0] Leader __consumer_offsets-19 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,131] INFO [Broker id=0] Leader __consumer_offsets-28 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,160] INFO [Broker id=0] Leader __consumer_offsets-38 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,193] INFO [Broker id=0] Leader __consumer_offsets-35 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,223] INFO [Broker id=0] Leader __consumer_offsets-6 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,255] INFO [Broker id=0] Leader __consumer_offsets-44 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,283] INFO [Broker id=0] Leader __consumer_offsets-25 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,318] INFO [Broker id=0] Leader __consumer_offsets-16 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,348] INFO [Broker id=0] Leader __consumer_offsets-22 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,377] INFO [Broker id=0] Leader __consumer_offsets-41 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,408] INFO [Broker id=0] Leader __consumer_offsets-32 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,438] INFO [Broker id=0] Leader __consumer_offsets-3 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,466] INFO [Broker id=0] Leader __consumer_offsets-13 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-01-31 19:58:37,545] INFO [Broker id=0] Finished LeaderAndIsr request in 927ms correlationId 1 from controller 0 for 54 partitions (state.change.logger)
[2023-01-31 19:58:37,562] INFO [Broker id=0] Add 54 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 4 with correlation id 2 (state.change.logger)
[2023-02-01 22:58:57,739] INFO [Controller id=0 epoch=5] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2023-02-01 22:58:57,807] INFO [Controller id=0 epoch=5] Sending LeaderAndIsr request to broker 0 with 54 become-leader and 0 become-follower partitions (state.change.logger)
[2023-02-01 22:58:57,816] INFO [Controller id=0 epoch=5] Sending UpdateMetadata request to brokers Set(0) for 54 partitions (state.change.logger)
[2023-02-01 22:58:57,926] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 54 partitions (state.change.logger)
[2023-02-01 22:58:57,972] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 5 as part of the become-leader transition for 54 partitions (state.change.logger)
[2023-02-01 22:58:57,991] INFO [Broker id=0] Leader __consumer_offsets-0 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:57,997] INFO [Broker id=0] Leader __consumer_offsets-29 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,000] INFO [Broker id=0] Leader __consumer_offsets-48 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,003] INFO [Broker id=0] Leader test-topic-2 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 2 with partition epoch 0, high watermark 2, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,004] INFO [Broker id=0] Leader __consumer_offsets-10 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 15 with partition epoch 0, high watermark 15, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,004] INFO [Broker id=0] Leader __consumer_offsets-45 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,007] INFO [Broker id=0] Leader __consumer_offsets-26 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,010] INFO [Broker id=0] Leader __consumer_offsets-7 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,012] INFO [Broker id=0] Leader __consumer_offsets-42 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,015] INFO [Broker id=0] Leader __consumer_offsets-4 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,019] INFO [Broker id=0] Leader __consumer_offsets-23 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,022] INFO [Broker id=0] Leader test-topic-3 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 1 with partition epoch 0, high watermark 1, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,022] INFO [Broker id=0] Leader __consumer_offsets-1 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,025] INFO [Broker id=0] Leader __consumer_offsets-20 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 1100 with partition epoch 0, high watermark 1100, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,025] INFO [Broker id=0] Leader __consumer_offsets-39 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,028] INFO [Broker id=0] Leader __consumer_offsets-17 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,031] INFO [Broker id=0] Leader __consumer_offsets-36 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,035] INFO [Broker id=0] Leader test-topic-0 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 139 with partition epoch 0, high watermark 139, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,035] INFO [Broker id=0] Leader __consumer_offsets-14 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,038] INFO [Broker id=0] Leader __consumer_offsets-33 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,041] INFO [Broker id=0] Leader __consumer_offsets-49 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,043] INFO [Broker id=0] Leader __consumer_offsets-11 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,046] INFO [Broker id=0] Leader __consumer_offsets-30 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,049] INFO [Broker id=0] Leader __consumer_offsets-46 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,052] INFO [Broker id=0] Leader __consumer_offsets-27 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 152 with partition epoch 0, high watermark 152, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,053] INFO [Broker id=0] Leader __consumer_offsets-8 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,055] INFO [Broker id=0] Leader __consumer_offsets-24 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,058] INFO [Broker id=0] Leader __consumer_offsets-43 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,061] INFO [Broker id=0] Leader __consumer_offsets-5 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,064] INFO [Broker id=0] Leader __consumer_offsets-21 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,066] INFO [Broker id=0] Leader __consumer_offsets-40 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,069] INFO [Broker id=0] Leader __consumer_offsets-2 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,072] INFO [Broker id=0] Leader __consumer_offsets-37 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,075] INFO [Broker id=0] Leader __consumer_offsets-18 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,078] INFO [Broker id=0] Leader test-topic-1 with topic id Some(OANUbA1wTjKPD7l7SpgrSg) starts at leader epoch 0 from offset 3 with partition epoch 0, high watermark 3, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,078] INFO [Broker id=0] Leader __consumer_offsets-34 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,081] INFO [Broker id=0] Leader __consumer_offsets-15 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,084] INFO [Broker id=0] Leader __consumer_offsets-12 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,087] INFO [Broker id=0] Leader __consumer_offsets-31 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,090] INFO [Broker id=0] Leader __consumer_offsets-9 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,094] INFO [Broker id=0] Leader __consumer_offsets-47 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,096] INFO [Broker id=0] Leader __consumer_offsets-19 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,099] INFO [Broker id=0] Leader __consumer_offsets-28 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,102] INFO [Broker id=0] Leader __consumer_offsets-38 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,105] INFO [Broker id=0] Leader __consumer_offsets-35 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,108] INFO [Broker id=0] Leader __consumer_offsets-6 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 199 with partition epoch 0, high watermark 199, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,109] INFO [Broker id=0] Leader __consumer_offsets-44 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,111] INFO [Broker id=0] Leader __consumer_offsets-25 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,114] INFO [Broker id=0] Leader __consumer_offsets-16 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,116] INFO [Broker id=0] Leader __consumer_offsets-22 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,120] INFO [Broker id=0] Leader __consumer_offsets-41 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,123] INFO [Broker id=0] Leader __consumer_offsets-32 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,127] INFO [Broker id=0] Leader __consumer_offsets-3 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,130] INFO [Broker id=0] Leader __consumer_offsets-13 with topic id Some(WX2zNAFfSXyDCUNjGn6kLA) starts at leader epoch 0 from offset 0 with partition epoch 0, high watermark 0, ISR [0], adding replicas [] and removing replicas []. Previous leader epoch was -1. (state.change.logger)
[2023-02-01 22:58:58,189] INFO [Broker id=0] Finished LeaderAndIsr request in 265ms correlationId 1 from controller 0 for 54 partitions (state.change.logger)
[2023-02-01 22:58:58,202] INFO [Broker id=0] Add 54 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 5 with correlation id 2 (state.change.logger)
